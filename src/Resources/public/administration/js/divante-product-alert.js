(this.webpackJsonp=this.webpackJsonp||[]).push([["divante-product-alert"],{ECLS:function(t,e){t.exports='{% block product_alert_list %}\n<sw-page class="product-alert-list">\n    <template slot="smart-bar-actions">\n        <sw-button-process\n                :isLoading="isLoading"\n                :processSuccess="processSuccess"\n                variant="primary"\n                @process-finish="processFinish"\n                @click="showModal">\n            {{ $t(\'product-alert.process.buttonText\') }}\n        </sw-button-process>\n    </template>\n    <template slot="content">\n        {% block product_alert_list_modal %}\n        <sw-modal v-if="modalVisible"\n                  :title="$tc(\'product-alert.process.modal.title\')"\n                  variant="small"\n                  @modal-close="closeModal">\n\n            <p>{{ $tc(\'product-alert.process.modal.confirmation\') }}</p>\n\n            <template slot="modal-footer">\n                <sw-button @click="processAlerts" variant="primary" size="small">\n                    {{ $tc(\'product-alert.process.modal.buttonProcess\') }}\n                </sw-button>\n\n                <sw-button @click="closeModal" size="small">\n                    {{ $tc(\'product-alert.process.modal.buttonCancel\') }}\n                </sw-button>\n            </template>\n        </sw-modal>\n        {% endblock %}\n        {% block product_alert_list_content %}\n        <div class="sw-promotion-list__content">\n            {% block product_alert_list_content_grid %}\n            <sw-entity-listing\n                    v-if="rows"\n                    :items.sync="rows"\n                    :repository="repository"\n                    :showSelection="false"\n                    :columns="columns">\n            </sw-entity-listing>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </template>\n</sw-page>\n{% endblock %}'},Gt0V:function(t,e){t.exports='{% block product_alert_list %}\n    <sw-page class="swag-bundle-detail">\n        <template slot="content">\n            <sw-card-view>\n                <sw-card v-if="alertData">\n                    <sw-field :label="$t(\'product-alert.details.idLabel\')"\n                              :placeholder="$tc(\'product-alert.details.defaultPlaceholder\')"\n                              v-model="alertData.id"\n                              disabled\n                    ></sw-field>\n                    <sw-field :label="$t(\'product-alert.details.nameLabel\')"\n                              :placeholder="$tc(\'product-alert.details.defaultPlaceholder\')"\n                              v-model="alertData.name"\n                              disabled\n                    ></sw-field>\n                    <sw-field :label="$t(\'product-alert.details.countLabel\')"\n                              :placeholder="$tc(\'product-alert.details.countLabelPlaceholder\')"\n                              v-model="alertData.count"\n                              disabled\n                    ></sw-field>\n                </sw-card>\n            </sw-card-view>\n        </template>\n    </sw-page>\n{% endblock %}'},O3dJ:function(t,e,o){"use strict";o.r(e);var a=o("ECLS"),s=o.n(a);const{Component:r,Mixin:i}=Shopware,{Criteria:n}=Shopware.Data;r.register("product-alert-list",{template:s.a,inject:["repositoryFactory","productAlertApiService"],mixins:[i.getByName("notification")],metaInfo(){return{title:this.$createTitle()}},data:()=>({repository:null,rows:null,processSuccess:!1,isLoading:!1,modalVisible:!1}),created(){this.fetchData()},computed:{columns(){return[{property:"product.id",dataIndex:"product.id",label:this.$tc("product-alert.list.columnId"),allowResize:!0,primary:!0,routerLink:"product.alert.details"},{property:"product.name",dataIndex:"product.name",label:this.$tc("product-alert.list.columnName"),allowResize:!0,primary:!1,routerLink:"product.alert.details"},{property:"email",dataIndex:"email",label:this.$tc("product-alert.list.columnEmail"),allowResize:!0,primary:!1}]}},methods:{fetchData(){this.repository=this.repositoryFactory.create("product_alert");const t=new n;t.addAssociation("product"),this.repository.search(t,Shopware.Context.api).then(t=>{this.rows=t})},processAlerts(){this.closeModal(),this.createNotificationInfo({title:this.$tc("global.default.info"),message:this.$tc("product-alert.process.started")}),this.isLoading=!0,this.productAlertApiService.process().then(t=>{this.fetchData(),this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("product-alert.process.success",0,{count:t.data})})}).catch(()=>{this.createNotificationError({title:this.$tc("global.default.error"),message:this.$tc("product-alert.process.error")}),this.processSuccess=!1}),this.processSuccess=!0,this.isLoading=!1},processFinish(){this.processSuccess=!1},showModal(){this.modalVisible=!0},closeModal(){this.modalVisible=!1}}});var l=o("Gt0V"),c=o.n(l);const{Criteria:d}=Shopware.Data;Shopware.Component.register("product-alert-details",{template:c.a,inject:["repositoryFactory"],metaInfo(){return{title:this.$createTitle()}},data:()=>({alertData:{id:null,name:null,count:null},entity:null}),created(){this.repository=this.repositoryFactory.create("product_alert");const t=this.getCriteria();t.addFilter(d.equals("product_alert.id",this.$route.params.id)),this.repository.search(t,Shopware.Context.api).then(t=>{this.entity=t[0],this.alertData.id=this.entity.product.id,this.alertData.name=this.entity.product.name,this.getCount()})},methods:{getCriteria(){const t=new d;return t.addAssociation("product"),t},getCount(){const t=this.getCriteria();t.addFilter(d.equals("product_alert.productId",this.entity.product.id)),t.addAggregation(d.terms("count","product.id")),this.repository.search(t,Shopware.Context.api).then(t=>{this.alertData.count=t.aggregations.count.buckets[0].count})}}});var p=o("RUch");Shopware.Module.register("product-alert",{color:"#ff3d58",icon:"default-chart-bar",title:"Product Alert",description:"List of products and subscribers count for out of stock notification.",snippets:{"en-GB":p},routes:{list:{component:"product-alert-list",path:"list"},details:{component:"product-alert-details",path:"details/:id",meta:{parentPath:"product.alert.list"}}},navigation:[{label:"Product Alert",color:"#ff3d58",path:"product.alert.list",icon:"default-chart-bar",parent:"sw-catalogue",position:100}]});const u=Shopware.Classes.ApiService;var h=class extends u{constructor(t,e,o="product.alert"){super(t,e,o)}process(){const t=this.getHeaders();return this.httpClient.get("/_action/product/alert/process",{headers:t})}getHeaders(){return{Accept:"application/json",Authorization:`Bearer ${this.loginService.getToken()}`,"Content-Type":"application/json"}}};const{Application:m}=Shopware;m.addServiceProvider("productAlertApiService",t=>{const e=m.getContainer("init");return new h(e.httpClient,t.loginService)})},RUch:function(t){t.exports=JSON.parse('{"product-alert":{"list":{"columnId":"Product ID","columnName":"Product Name","columnEmail":"Email"},"details":{"defaultPlaceholder":"Fetching data...","idLabel":"Product ID","nameLabel":"Product Name","countLabel":"Number of subscribers for out of stock notification","countLabelPlaceholder":"Calculating..."},"process":{"started":"Processing notifications...","success":"{count} notifications has been sent successfully.","error":"Unable to process notifications.","buttonText":"Send notifications manually","modal":{"confirmation":"Are you sure you want to process notifications manually?","buttonProcess":"Process","buttonCancel":"Cancel","title":"Confirmation"}}}}')}},[["O3dJ","runtime"]]]);